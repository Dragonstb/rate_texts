import numpy as np
from rate_texts.dev_tools import utils
from typing import List

_stems = np.array([
    'Copper', 'Silver', 'Gold', 'Diamond', 'Iron', 'Steel', 'Coal', 'Uranium', 'Lithium', 'Lead', 'Tin',

    'Stone', 'Marble', 'Sand', 'Rock', 'Obsidian', 'Clay',

    'Fir', 'Acorn', 'Chestnut', 'Pine', 'Beech', 'Cherry', 'Larch', 'Willow', 'Apple', 'Peach', 'Pear', 'Oak',

    'Joes', 'Danas', 'Richards', 'Samanthas', 'Victors', 'Victorias', 'Alex', 'Abrahams', 'Alexias',
    'Herberts', 'Harriets', 'Charles', 'Charlottes',

    'Black', 'Red', 'Green', 'Blue', 'Yellow', 'Orange', 'Cyan', 'Magenta', 'Purple', 'Azure', 'Brown', 'Lime',
    'Sky', 'Tan', 'Violet', 'White',

    'Ants', 'Mantis', 'Bees', 'Wasps', 'Hornets', 'Bugs', 'Butterflys', 'Moth', 'Pillars',

    'Monkeys', 'Elephants', 'Seals', 'Lions', 'Tigers', 'Badgers', 'Cows', 'Goats', 'Sheeps', 'Wolfs', 'Horses',
    'Whales', 'Dolphins', 'Boars', 'Dogs', 'Cats', 'Pigs', 'Triceratpos',

    'Parrots', 'Vultures', 'Eagles', 'Hawks', 'Sparrows', 'Doves', 'Salmons',

    'Crocodiles', 'Gators', 'Lizards', 'Snakes', 'Frogs',

    'Quaint', 'Pleasant', 'Peace', 'Harmony', 'Heavens',

    'Cloud', 'Sun', 'Rain', 'Thunder', 'Storm',

    'Kings', 'Queens', 'Barons', 'Baroness', 'Dukes', 'Duchess', 'Presidents', 'Majors', 'Officers',

    'Mill', 'Quarry', 'Furnace', 'Mine', 'Logger',
])
_suffixes = np.array([
    'springs', 'peak', 'port', ' Mountain', ' Valley', 'burgh', 'fort', 'mouth', ' Harbour', 'bay', 'shire',
    'coast', 'cliffs', ' Hills', 'plains', 'ville', 'town', 'let', 'forest', 'woods', ' Mill', 'smith', 'point',
    'shore', ' Beach', 'river', 'bridge', ' Edge', ' Crossing'
])
_prefixes = np.array([
    'Point', 'Port', 'New', 'Peak', 'Little', 'Rocky', 'Sandy', 'Windy', 'Sunny', 'Silent'
])


def gen_towns(num: int = 1) -> List:
    """
    Generate random town names and allocates a random number of
    inhabitant to each name. The names are generating by picking
    from a list of prefixes, name stems, and suffixes.

    The prefix and/or the suffix might be skipped when composing the name.

    The number of towns is limited to half of the number of possible town
    names. Higher values of *num* won't have any effect. Likewise, the minimum
    number is always at least unity.

    It is garuanteed that each town name in the generated list is unique.

    num (default 1):
    Number of town names and populations generated.

    return:
    Pandas series where the names are the indices and the populations are
    the values.
    """
    size = np.max([np.min([num, get_combinations()//2]), 1])
    rand = np.random.default_rng()
    names = set()

    while len(names) < size:
        name = _gen_single_town_name(rand)
        names.add(name)
        # TODO: fix: ends up less than 'num' towns if a name it happens to be composed more than once

    return list(names)


def _gen_single_town_name(rand: np.random.Generator) -> str:
    rolls = rand.random(size=2)
    sentence = []

    if rolls[0] < 0.2:
        sentence.append(utils.pick_from_array(_prefixes))
        sentence.append(' ')

    sentence.append(utils.pick_from_array(_stems))

    if rolls[1] < 0.85:
        sentence.append(utils.pick_from_array(_suffixes))

    return ''.join(sentence)


def get_combinations() -> int:
    """
    Computes the number of distinguished town names that can be generated by *gen_town()*.

    returns:
    Number of possible town names.
    """
    numStem = len(_stems)
    numStemSuffix = numStem*len(_suffixes)
    numPrefixStem = numStem*len(_prefixes)
    numAll = numStemSuffix*len(_prefixes)
    return numStem + numStemSuffix + numPrefixStem + numAll
